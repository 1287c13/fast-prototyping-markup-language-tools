//туду для реквизиты комментарий : убирать для него на хардкоде выбор, а кнопку взять программно с признака
#Область Обработчики

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТипОбъектаДляРазметки = "Документы";
	ОбъектДляРазметки = "АвансовыйОтчет";
	ФормаДляРазметки = "ФормаДокумента";
	НомераАктивныхВкладок = "1"; // csv
КонецПроцедуры


&НаКлиенте
Процедура ПерейтиВВебПриложение(Команда)
	ЗапуститьПриложение("https://verno.tech/");
КонецПроцедуры


&НаКлиенте
Процедура ОбъектДляРазметкиОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПолноеИмяТипа = ПолучитьПолноеИмяТипа(Строка(ВыбранноеЗначение), ЭтотОбъект.ТипОбъектаДляРазметки);	
	ЭтаФорма.ОбъектДляРазметки = ПолноеИмяТипа;
КонецПроцедуры


#КонецОбласти


#Область ЛогикаОсновнойКоманды

// Обработчик главной команды. Формирует структуру настроек алгоритма 
// и последовательно вызывает методы, реализующие логику команды.
&НаКлиенте
Процедура ПолучитьРазметкуФормы(Команда)
	
	НадписьНаФорме = ОбъектДляРазметки;  // todo вычислить по объекту
	
	// инициализация параметров алгоритма
	
	ИгнорируемыеИменаГрупп = Новый Массив();
	// игнорируемые группы
	ИгнорируемыеИменаГрупп.Добавить("КонтекстноеМеню");
	ИгнорируемыеИменаГрупп.Добавить("КоманднаяПанель");
	ИгнорируемыеИменаГрупп.Добавить("ИзменениеСтрок");
	ИгнорируемыеИменаГрупп.Добавить("Подменю");
	ИгнорируемыеИменаГрупп.Добавить("ВажныеКоманды");
	ИгнорируемыеИменаГрупп.Добавить("ГлобальныеКоманды");
	ИгнорируемыеИменаГрупп.Добавить("Дополнительно"); 
	// игнорируемые корневые элементы
	ИгнорируемыеИменаГрупп.Добавить("СтрокаПоиска");
	ИгнорируемыеИменаГрупп.Добавить("СостояниеПросмотра");
	ИгнорируемыеИменаГрупп.Добавить("УправлениеПоиском");
	ИгнорируемыеИменаГрупп.Добавить("ПоискПоТекущемуЗначению");
	ИгнорируемыеИменаГрупп.Добавить("Найти2");
	ИгнорируемыеИменаГрупп.Добавить("ОтменитьПоиск2");
	
	ИгнорируемыеТипыЭлементов = Новый Массив();
	ИгнорируемыеТипыЭлементов.Добавить("ДекорацияФормы"); 
	
	ЭлементыСДетьми = Новый Массив();
	ЭлементыСДетьми.Добавить("ГруппаФормы");
	ЭлементыСДетьми.Добавить("ТаблицаФормы");
	ЭлементыСДетьми.Добавить("ФормаКлиентскогоПриложения");
	
	ОбработанныеЭлементы = Новый Массив();
	ТекущийОтступ = 1;
	ИменаИТипыРеквизитов = СобратьТипыНаСервере(
	Лев(ТипОбъектаДляРазметки, СтрДлина(ТипОбъектаДляРазметки) - 1), 
	ОбъектДляРазметки);
	
	ПараметрыАлгоритма = Новый Структура(
	"ТекущийОтступ,ИгнорируемыеИменаГрупп,ИгнорируемыеТипыЭлементов,ОбработанныеЭлементы,
	|ЭлементыСДетьми,ИменаИТипыРеквизитов", 
	ТекущийОтступ, ИгнорируемыеИменаГрупп, ИгнорируемыеТипыЭлементов, ОбработанныеЭлементы, 
	ЭлементыСДетьми, ИменаИТипыРеквизитов);
	
	
	// поиск формы
	ИмяФормыДляРазметки = СтрШаблон("%1.%2.Форма.%3", 
	Лев(ТипОбъектаДляРазметки, СтрДлина(ТипОбъектаДляРазметки) - 1), 
	ОбъектДляРазметки, 
	ФормаДляРазметки) ;
	
	Форма = ПолучитьФорму(ИмяФормыДляРазметки);
	
	
	// формирование разметки
	РазметкаФормы = СтрШаблон(
	"форма .имя %1 .стилизация 1с", НадписьНаФорме) + Символы.ПС;
	
	Для каждого Элемент из Форма.Элементы цикл   
		РекурсивноСформироватьРазметкуЭлемента(Элемент, РазметкаФормы, ПараметрыАлгоритма);
	КонецЦикла;
	
	РазметкаФормы = ПостобработкаРазметки(РазметкаФормы);
	
	ЗначенияДляЗаполнения = Новый Структура("РазметкаЯРБП", РазметкаФормы);
	ЗаполнитьФормуНаСервере(ЗначенияДляЗаполнения);
	
КонецПроцедуры  

// Обходит дерево элементов формы и передает на обработку элементы, 
// которые должны быть включены в разметку
&НаКлиенте
Процедура РекурсивноСформироватьРазметкуЭлемента(
	Элемент, РазметкаФормы, ПараметрыАлгоритма, ВходитВИгнорируемуюГруппу = Ложь)
	
	СобиратьДетейЭтогоЭлемента = Ложь;
	Для Каждого ИмяТипа из ПараметрыАлгоритма.ЭлементыСДетьми цикл
		Если ТипЗнч(Элемент) = Тип(ИмяТипа) тогда
			СобиратьДетейЭтогоЭлемента = Истина;  
		КонецЕсли;
	КонецЦикла; 
	
	ИгнорироватьЭтотЭлемент = Ложь;
	Для Каждого ИгнорируемаяПодстрока из ПараметрыАлгоритма.ИгнорируемыеИменаГрупп цикл
		Если СтрНайти(Элемент.Имя, ИгнорируемаяПодстрока) тогда
			ИгнорироватьЭтотЭлемент = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если СобиратьДетейЭтогоЭлемента тогда 
		
		// если этот элемент (=> и его дети) не игнорируется, то 
		Если не ИгнорироватьЭтотЭлемент тогда
			
			// получаем разметку элемента и добавляем его в разметку формы
			РазметкаФормы = РазметкаФормы 
			+ ПолучитьРазметкуЭлемента(Элемент, ПараметрыАлгоритма, ВходитВИгнорируемуюГруппу);
			
			// Увеличение уровня отступа в разметке и рекурсивный вызов. 
			// После возврата из рекурсии уменьшение отступа.
			ПараметрыАлгоритма.ТекущийОтступ = ПараметрыАлгоритма.ТекущийОтступ + 1;
			Для каждого ВложенныйЭлемент из Элемент.ПодчиненныеЭлементы цикл
				РекурсивноСформироватьРазметкуЭлемента(
				ВложенныйЭлемент, РазметкаФормы, ПараметрыАлгоритма, ВходитВИгнорируемуюГруппу)  // todo объединить с рек. вызовом ниже (сократить "иначе"), д. этого подумать о замене ВходитВИгнорируемуюГруппу на ИгнорироватьЭтотЭлемент
			КонецЦикла;
			ПараметрыАлгоритма.ТекущийОтступ = ПараметрыАлгоритма.ТекущийОтступ - 1;
			
		Иначе
			// рекурсивный вызов без добавления в разметку, предназначен для добавления детей игнорируемых родителей
			// в список обработанных элементов (чтобы не добавлять их в разметку при повторной встрече)
			Для каждого ВложенныйЭлемент из Элемент.ПодчиненныеЭлементы цикл
				РекурсивноСформироватьРазметкуЭлемента(
				ВложенныйЭлемент, РазметкаФормы, ПараметрыАлгоритма, Истина) 
			КонецЦикла;	
		КонецЕсли;
		
	Иначе
		Если не ИгнорироватьЭтотЭлемент тогда
			РазметкаФормы = РазметкаФормы 
			+ ПолучитьРазметкуЭлемента(Элемент, ПараметрыАлгоритма, ВходитВИгнорируемуюГруппу);   
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает элемент, определяет способ его обработки, вызывает нужный обработчик, 
// получает от него разметку и возвращает ее
&НаКлиенте
Функция ПолучитьРазметкуЭлемента(Элемент, ПараметрыАлгоритма, ВходитВИгнорируемуюГруппу) 
	
	Если ПараметрыАлгоритма.ОбработанныеЭлементы.Найти(Элемент) <> Неопределено Тогда 
		ПараметрыАлгоритма.ОбработанныеЭлементы.Добавить(Элемент);
		Возврат "";
	КонецЕсли;
	
	ПараметрыАлгоритма.ОбработанныеЭлементы.Добавить(Элемент);
	
	// туду : убрать, это для отладки
	ВидЭлемента = "";
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") тогда
		ВидЭлемента = Элемент.Вид;
		//ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеНадписи") тогда
		//	ВидЭлемента = Элемент.Вид; 
	КонецЕсли;
	
	Если 
		ПараметрыАлгоритма.ИгнорируемыеТипыЭлементов.Найти(Строка(Элемент)) = Неопределено
		И 
		не ВходитВИгнорируемуюГруппу 
		тогда
		
		//Попытка
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") 
			И Строка(Элемент.Вид) <> "Страницы" И Строка(Элемент.Вид) <> "Страница" тогда			
			РазметкаЭлемента = ПолучитьРазметкуГруппы(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаФормы") И Строка(Элемент.Вид) = "Страницы" тогда
			РазметкаЭлемента = "<страницы>";
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаФормы") И Строка(Элемент.Вид) = "Страница" тогда
			РазметкаЭлемента = "<" + Элемент.Заголовок + ">";
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Строка(Элемент.Вид) = "Поле ввода" тогда
			РазметкаЭлемента = ПолучитьРазметкуПоляВвода(Элемент, ПараметрыАлгоритма.ИменаИТипыРеквизитов);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Строка(Элемент.Вид) = "Поле флажка" тогда
			РазметкаЭлемента = ПолучитьРазметкуПоляФлажка(Элемент);
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") И Строка(Элемент.Вид) = "Поле надписи" тогда
			РазметкаЭлемента = ПолучитьРазметкуПоляНадписи(Элемент);
		Иначе
			// убрать, это должно стать исключением и обработаться ниже
			РазметкаЭлемента = Элемент.Имя + " " + ВидЭлемента + " " + ТипЗнч(Элемент);
		КонецЕсли;
		
		Разметка = СтрСоединить(Новый Массив(ПараметрыАлгоритма.ТекущийОтступ + 1), "  ") 
		+ РазметкаЭлемента + Символы.ПС;
		
		//Исключение
		//	Сообщить(СтрШаблон(
		//		"Возникла ошибка при попытке обработки элемента '%1' вида '%2'. Элемент не будет включен в разметку.", 
		//		Элемент.Имя, Строка(Элемент.Вид)));
		//КонецПопытки;
		
	КонецЕсли;
	
	Возврат Разметка;
КонецФункции

// Удаление лишних элементов и форматирование
&НаКлиенте
Функция ПостобработкаРазметки(РазметкаФормы) 
	
	НомераВкладок = СтрРазделить(СокрЛП(ЭтаФорма.НомераАктивныхВкладок), ";");
	РазметкаСтраницыРезультат = ПолучитьРазметкуСтраницы(РазметкаФормы, НомераВкладок[0]); // todo в идеале это csv так как вкладок может быть не одна много, доработать
	РазметкаФормы = ПреобразоватьСтраницы(РазметкаФормы, РазметкаСтраницыРезультат);
	
	РазметкаФормы = ПреобразоватьТаблицы(РазметкаФормы);
	
	Возврат РазметкаФормы;
КонецФункции

// Заменить предразметку одной группы страниц на полученную разметку
&НаКлиенте
Функция ПреобразоватьСтраницы(РазметкаФормы, РазметкаСтраницыРезультат) 
	
	МассивСтрок = СтрРазделить(РазметкаФормы, Символы.ПС);
	НоваяРазметкаФормы = "";
	
	Для Счетчик = 1 По МассивСтрок.Количество() Цикл
		// если это корневая строка таблиц то заменить ее на разметку корневого элемента
		// если строка входит в страницы И не входит в активную страницу (в т.ч первая строка табл.) то грохнуть ее
		// если это строка активной страницы то уменьшить ее отступ
		// иначе ничего не делать
		Если 
			Счетчик = РазметкаСтраницыРезультат.ПерваяСтрока 
			тогда
			Отступ = ОпределитьОтступСтроки(МассивСтрок[Счетчик - 1]);
			РазметкаСтраницыРезультат.РазметкаСтраницы = СтрСоединить(Новый Массив(Отступ * 2 + 1), " ") 
			+ РазметкаСтраницыРезультат.РазметкаСтраницы;
			МассивСтрок[Счетчик - 1] = РазметкаСтраницыРезультат.РазметкаСтраницы;
		ИначеЕсли
			Счетчик > РазметкаСтраницыРезультат.ПерваяСтрока 
			И Счетчик <= РазметкаСтраницыРезультат.ПерваяСтрокаСтраницы
			тогда
			МассивСтрок[Счетчик - 1] = "";
		ИначеЕсли
			Счетчик > РазметкаСтраницыРезультат.ПоследняяСтрокаСтраницы 
			И Счетчик <= РазметкаСтраницыРезультат.ПоследняяСтрока
			тогда
			МассивСтрок[Счетчик - 1] = "";
		ИначеЕсли
			Счетчик > РазметкаСтраницыРезультат.ПерваяСтрокаСтраницы
			И Счетчик <= РазметкаСтраницыРезультат.ПоследняяСтрокаСтраницы
			тогда
			МассивСтрок[Счетчик - 1] = Прав(МассивСтрок[Счетчик - 1], СтрДлина(МассивСтрок[Счетчик - 1]) - 2);
		КонецЕсли;
		
		Если МассивСтрок[Счетчик - 1] <> "" тогда
			НоваяРазметкаФормы = НоваяРазметкаФормы + МассивСтрок[Счетчик - 1] + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НоваяРазметкаФормы;
КонецФункции

#КонецОбласти


&НаКлиенте
Функция ПреобразоватьТаблицы(РазметкаФормы) // todo здесь все на костылях: сейчас опираемся на совпадения имен, а не на синтаксис
	НоваяРазметкаФормы = "";
	ИмяТаблицы = "";
	
	МассивСтрок = СтрРазделить(РазметкаФормы, Символы.ПС);
	Для Счетчик = 1 По МассивСтрок.Количество() Цикл
		Тэг = МассивСтрок[Счетчик - 1];
		
		// подменяем разметку шапки таблицы
		Если СрвСоответствуетРегВыражению(Тэг, ".+Таблица формы") тогда
			
			ИмяТаблицы = СтрРазделить(СокрЛ(Тэг), " ")[0];
			КоличествоКолонок = СтрЧислоВхождений(РазметкаФормы, СтрШаблон("реквизит .имя %1", ИмяТаблицы));
			РазметкаТаблицы = СтрШаблон("таблица .панель да .строк 3 .колонок %1", КоличествоКолонок);
			
			Отступ = ОпределитьОтступСтроки(МассивСтрок[Счетчик - 1]);
			РазметкаТаблицы = СтрСоединить(Новый Массив(Отступ * 2 + 1), " ") + РазметкаТаблицы;
			
			МассивСтрок[Счетчик - 1] = РазметкаТаблицы;
			
		// подменяем разметку колонок
		ИначеЕсли ИмяТаблицы <> "" И СтрЧислоВхождений(Тэг, СтрШаблон("реквизит .имя %1", ИмяТаблицы)) = 1 тогда
			ИмяКолонки = Прав(
				СтрРазделить(СтрРазделить(Тэг, ":")[0], ".")[1], 
				СтрДлина(СтрРазделить(СтрРазделить(Тэг, ":")[0], ".")[1]) - 4
			);
			РазметкаКолонки = "колонка .имя " + ИмяКолонки + " .данные ||";
			
			Отступ = ОпределитьОтступСтроки(МассивСтрок[Счетчик - 1]);
			РазметкаКолонки = СтрСоединить(Новый Массив(Отступ * 2 + 1), " ") + РазметкаКолонки;
			
			МассивСтрок[Счетчик - 1] = РазметкаКолонки;
		КонецЕсли;
		
		НоваяРазметкаФормы = НоваяРазметкаФормы + МассивСтрок[Счетчик - 1] + Символы.ПС;
	КонецЦикла;
	
  Возврат НоваяРазметкаФормы;
КонецФункции


#Область Сериализаторы

&НаКлиенте
Функция ПолучитьРазметкуГруппы(Элемент) 
	Заполнять = "слева-направо";
	Попытка Если Строка(Элемент.Группировка) = "Вертикальная" тогда
		Заполнять = "сверху-вниз";
	КонецЕсли; Исключение КонецПопытки;                   
	РазметкаЭлемента = СтрШаблон("блок .заполнять %1", Заполнять);
	
	Возврат РазметкаЭлемента;
КонецФункции    


&НаКлиенте
Функция ПолучитьРазметкуПоляВвода(Элемент, ИменаИТипыРеквизитов) 
	
	РазметкаЭлемента = "реквизит";
	
	Если Элемент.Заголовок <> "" Тогда
		СвойствоИмя = Элемент.Заголовок 
	Иначе
		СвойствоИмя = Элемент.Имя;
	КонецЕсли;
	РазметкаЭлемента = РазметкаЭлемента + " .имя " + СвойствоИмя + ":";
	
	СвойствоДействие = "открыть";
	СвойствоВыбор = "да";
	Попытка
		ТипЭтогоРеквизита = ИменаИТипыРеквизитов[Элемент.Имя];
	Исключение
		ТипЭтогоРеквизита = Неопределено;		
	КонецПопытки;
	Если ТипЭтогоРеквизита = "Строка" тогда
		СвойствоДействие = "нетДействий";
		СвойствоВыбор = "нет";
	ИначеЕсли ТипЭтогоРеквизита = "Дата" тогда
		СвойствоДействие = "календарь";
		СвойствоВыбор = "нет";
	КонецЕсли;
	
	РазметкаЭлемента = РазметкаЭлемента + " .действия " + СвойствоДействие;
	РазметкаЭлемента = РазметкаЭлемента + " .выбор " + СвойствоВыбор;
	
	// todo убрать костыли (если смотреть широко то в целом стоит переделать получение типов => стилизации на форме)
	Если Элемент.Имя = "Комментарий" тогда
		РазметкаЭлемента = "реквизит .имя Комментарий: .действия диалог .выбор нет";
	КонецЕсли; 
	
	Если Элемент.Имя = "Дата" ИЛИ Элемент.Имя = "Номер" тогда
		РазметкаЭлемента = РазметкаЭлемента + " .ширина 100";
	КонецЕсли;
		
	Возврат РазметкаЭлемента;
КонецФункции


&НаКлиенте
Функция ПолучитьРазметкуПоляФлажка(Элемент) 
	                                                        
	РазметкаЭлемента = "чекбокс";
	
	Если Элемент.Заголовок <> "" Тогда
		СвойствоИмя = Элемент.Заголовок 
	Иначе
		СвойствоИмя = Элемент.Имя;
	КонецЕсли;
	РазметкаЭлемента = РазметкаЭлемента + " .имя " + СвойствоИмя + ":";
	
	РазметкаЭлемента = РазметкаЭлемента + " .флагУстановлен да";
	
	Возврат РазметкаЭлемента;
КонецФункции  

&НаКлиенте
Функция ПолучитьРазметкуПоляНадписи(Элемент) 
	
	РазметкаЭлемента = "надпись";
	
	Если Элемент.Заголовок <> "" Тогда
		СвойствоИмя = Элемент.Заголовок 
	Иначе
		СвойствоИмя = Элемент.Имя;
	КонецЕсли;
	РазметкаЭлемента = РазметкаЭлемента + " .имя " + СвойствоИмя + ":";
	
	Возврат РазметкаЭлемента;
КонецФункции


&НаКлиенте
Функция ПолучитьРазметкуСтраницы(РазметкаФормы, НомерВкладки = 1)
	Результат = Новый Структура(
	"РазметкаСтраницы,ПерваяСтрока,ПоследняяСтрока,ПерваяСтрокаСтраницы,ПоследняяСтрокаСтраницы", 
	"", 0, 0, 0, 0);
	
	ИменаВкладок = Новый Массив();
	ТекущаяСтрока = 1;                               
	РегВыражениеСтраница = "\s*<.+>";
	СчетчикВкладок = 1;
	Вкладки = "";
	ОтступКорневогоЭлемента = 0;
	Для каждого Тэг из СтрРазделить(РазметкаФормы, Символы.ПС) цикл
		
		Если СокрЛП(Тэг) = "<страницы>" тогда
			// это начало разметки страницы
			Результат.ПерваяСтрока = ТекущаяСтрока;
			ОтступКорневогоЭлемента = ОпределитьОтступСтроки(Тэг);
			
		ИначеЕсли
			Результат.ПерваяСтрока <> 0 
			И СрвСоответствуетРегВыражению(Тэг, РегВыражениеСтраница) 
			И Строка(СчетчикВкладок) = НомерВкладки
			Тогда
			
			// это первая строка целевой страницы => запоминаем где она началась и инкрементируем счетчик страниц
			Результат.ПерваяСтрокаСтраницы = ТекущаяСтрока;
			ИменаВкладок.Добавить(СокрЛП(СтрЗаменить(СтрЗаменить(Тэг, "<", ""), ">", "")));
			СчетчикВкладок = СчетчикВкладок + 1;
			
		ИначеЕсли
			Результат.ПерваяСтрока <> 0 
			И СрвСоответствуетРегВыражению(Тэг, РегВыражениеСтраница) // todo убрать вызов сервера в цикле (запросить все одним вызовом перед циклом)
			И Строка(СчетчикВкладок) <> НомерВкладки
			Тогда
			
			// это первая строка страницы, но страница не целевая => инкрементируем счетчик страниц
			ИменаВкладок.Добавить(СокрЛП(СтрЗаменить(СтрЗаменить(Тэг, "<", ""), ">", "")));
			СчетчикВкладок = СчетчикВкладок + 1;
			Если Результат.ПерваяСтрокаСтраницы <> 0 И Результат.ПоследняяСтрокаСтраницы = 0 тогда
				// предыдущая строка была последней строкой целевой вкладки
				Результат.ПоследняяСтрокаСтраницы = ТекущаяСтрока - 1;	
			КонецЕсли;
			
		КонецЕсли;
		
		Если
			ОтступКорневогоЭлемента = ОпределитьОтступСтроки(Тэг)
			И Результат.ПерваяСтрока <> ТекущаяСтрока
			И Результат.ПерваяСтрокаСтраницы <> 0
			Тогда 		
			// у этой строки тот же отступ что у корневого элемента, значит вкладки кончились => грохнуть цикл	
			Если Результат.ПоследняяСтрокаСтраницы = 0 тогда
				Результат.ПоследняяСтрокаСтраницы = ТекущаяСтрока - 1;	
			КонецЕсли;
			Результат.ПоследняяСтрока = ТекущаяСтрока - 1;
			Результат.РазметкаСтраницы = РендерингРазметкиСтраницы(ИменаВкладок, НомерВкладки);
			Возврат Результат;
		КонецЕсли;
		
		ТекущаяСтрока = ТекущаяСтрока + 1;
	КонецЦикла;	
	
	// если мы дошли до этой строки, значит триггер окончания разметки вкладок не сработал 
	// => разметка формы заканчивается одновременно с разметкой вкладки 
	// => нужно записать последнюю строку и вернуть разметку
	Если Результат.ПоследняяСтрокаСтраницы = 0 тогда // todo дублирующийся код 6 строк
		Результат.ПоследняяСтрокаСтраницы = ТекущаяСтрока - 1;	
	КонецЕсли;
	Результат.ПоследняяСтрока = ТекущаяСтрока - 1;
	Результат.РазметкаСтраницы = РендерингРазметкиСтраницы(ИменаВкладок, НомерВкладки);
	Возврат Результат;
КонецФункции

#КонецОбласти


#Область Утилиты

&НаСервере
Функция СобратьТипыНаСервере(ИмяТипаОбъекта, ИмяОбъекта)
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипаОбъекта + "." + ИмяОбъекта);    
	
	ИменаИТипыРеквизитов = Новый Структура();
	Реквизиты = Менеджер.СоздатьДокумент().Метаданные().Реквизиты;
	ИменаИТипыРеквизитов.Вставить("Номер", "Строка");
	ИменаИТипыРеквизитов.Вставить("Дата", "Дата");
	
	Для каждого Реквизит из Реквизиты цикл
		ИмяРеквизита = СтрРазделить(Реквизит.ПолноеИмя(), ".")[3];                                              
		ИменаИТипыРеквизитов.Вставить(ИмяРеквизита, Реквизит.Тип);
	КонецЦикла;                      
	
	Возврат ИменаИТипыРеквизитов;
КонецФункции


&НаКлиенте 
Процедура СобратьТипы(Команда) // todo это для отладки. удалить
	ИменаИТипыРеквизитов = СобратьТипыНаСервере("Документ", "АвансовыйОтчет");    
	
	Для каждого КлючИЗначение из ИменаИТипыРеквизитов цикл
		Сообщить(КлючИЗначение.Ключ + " : " + КлючИЗначение.Значение);                    
	КонецЦикла;		
	
КонецПроцедуры


&НаСервере
Процедура ЗаполнитьФормуНаСервере(ЗначенияДляЗаполнения)
	ЭтотОбъект.РазметкаЯРБП = ЗначенияДляЗаполнения.РазметкаЯРБП;	
КонецПроцедуры


&НаСервере
Функция ПолучитьПолноеИмяТипа(ИмяТипаСтрока, ИмяКласса);
	
	Для каждого ЭлементМетаданных из Метаданные[ИмяКласса] цикл
		Если ЭлементМетаданных.Синоним = ИмяТипаСтрока тогда
			ФормаЗаполнитьСписокВыбора(ЭлементМетаданных);
			Возврат ЭлементМетаданных.Имя;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат "<! имя не найдено>"
КонецФункции 


&НаСервере
Процедура ФормаЗаполнитьСписокВыбора(ЭлементМетаданных); // todo перенести вызов этой функции на клиент, тогда ее можно будет использовать для начального заполнения при открытии формы (сейчас накостылено на форме). Придется переписать для получения типа строкой а не элементом метаданных.
	ФормаДляРазметкиПоле = Элементы.Найти("ФормаДляРазметки");
	
	ФормаДляРазметкиПоле.СписокВыбора.Очистить();
	
	Счетчик = 0;
	Для каждого ФормаОбъекта из ЭлементМетаданных.Формы цикл 
		ФормаДляРазметкиПоле.СписокВыбора.Вставить(Счетчик, ФормаОбъекта.Имя);
		Счетчик = Счетчик + 1;	
	КонецЦикла;
	
КонецПроцедуры 


&НаСервере
Функция СрвСоответствуетРегВыражению(Стр, Регекс)
	Возврат СтрПодобнаПоРегулярномуВыражению(Стр, Регекс);
КонецФункции


&НаКлиенте
Функция ОпределитьОтступСтроки(Стр)
	Возврат (СтрДлина(Стр) - СтрДлина(СокрЛ(Стр))) / 2;
КонецФункции


&НаКлиенте
Функция РендерингРазметкиСтраницы(ИменаВкладок, НомерВкладки)
	РазметкаСтраницы = "вкладка";
	РазметкаСтраницы = РазметкаСтраницы + " .количествоВкладок " + Строка(ИменаВкладок.Количество());
	РазметкаСтраницы = РазметкаСтраницы + " .номерАктивнойВкладки " + Строка(НомерВкладки);
	
	ИменаВкладокЯРБП = "";
	Для каждого ИмяВкладки из ИменаВкладок цикл
		ИменаВкладокЯРБП = ИменаВкладокЯРБП + ИмяВкладки + "|";
	КонецЦикла;	
	РазметкаСтраницы = РазметкаСтраницы + " .вкладки " + Лев(ИменаВкладокЯРБП, СтрДлина(ИменаВкладокЯРБП) - 1);
	
	Возврат РазметкаСтраницы;
КонецФункции	

#КонецОбласти
